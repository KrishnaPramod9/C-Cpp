#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <assert.h>
#include <map>

#include "Lexical.h"
#include "Syntactic.h"
#include "Netlist.h"


int main(int argc, char *argv[]) 
{
  if (argc < 2) 
  {
    std::cerr << "You should provide a file name." << std::endl;
    return -1;
  }
  	evl_wires wires;
	evl_components components;
	evl_ports ports;
	evl_statements statements;
	evl_modules_map modules_map;
	evl_modules modules;


	if (!parse_evl_file(argv[1], wires, components, ports,modules))
	{
		return false;
	}

  // create output file
  std::string output_file_name = argv[1];

  output_file_name += ".netlist";

  std::ofstream output_file(output_file_name.c_str());

  if (!output_file) 
  {
    std::cerr << "I can't write " << output_file_name << "." << std::endl;
    return -1;
  }
  
 netlist netlist_1;

  if (!netlist_1.create(wires,components))
  {
	  return -1;
  }

  netlist_1.netlist_write (output_file, components, modules);

  std::cout << argv[1] << ": Info" << ": Ports " << ports.size() 
	  << ", Components " << netlist_1.components_count << ", Assigns 0" << std::endl;

  std::cout << argv[1] << ": Info: build module " << ": " << components.size() 
	  << " gates, " << netlist_1.nets_list.size() << " nets, " << netlist_1.pin_count << " pins." << std::endl;
  
  std::cout << argv[1] << ": Info: Tokens have been written into file: " << output_file_name << std::endl;
}

#include <iostream>
#include <string>
#include <list>
#include <map>
#include <stddef.h>
#include <sstream>
#include <assert.h>
#include <fstream>

#include "Lexical.h"
#include "Syntactic.h"
#include "Netlist.h"

void netlist::create_net(std::string net_name) 
{
	nets_list.push_back(net_name);
}

bool netlist::create_nets(const evl_wires &wires) 
{
	
	for (evl_wires::const_iterator iter = wires.begin(); iter != wires.end(); ++iter)
	{
		if (iter->width == 1) 
		{
			create_net(iter->name);
		}
		else 
		{
			for (int i = 0; i < iter->width ; ++i) 
			{
				create_net(make_net_name(iter->name,i)); 			
			}
		}
	}
	return true;
}

bool netlist::create_gates(const evl_components &components)
{
	for (evl_components::const_iterator iter_c = components.begin(); iter_c != components.end(); ++iter_c)
	{
		gates_.push_back (new gate);
		gates_.back()->create(*iter_c, nets_);
	}
	return true;
}

bool netlist::create(const evl_wires &wires, const evl_components &comps) 
{
	bool ret_value;

	create_nets(wires); 
	create_gates(comps); 

	wires_count = 0;

	ret_value = create_connects(comps, nets_list, gate_pin_map_, pins_list_, plist);

	wires_count = nets_list.size();

	return ret_value;
}

bool netlist::semantics_error (const std::string &type_, const std::string &name_)
{
	std::cerr << "Error: Number of pins for " << type_ << " gate: " << name_ << " is invalid!" << std::endl;

	return false;
}

bool netlist::structural_semantics (const std::string &type_, const std::string &name_, const evl_pins &pins_, string_2_list &predef_gates_type)  
{
  if (type_ == "and") 
  {
    if (pins_.size() < 3) 
	{
  	  return semantics_error (type_, name_);
	}  

	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	for (evl_pins::const_iterator iter_p = pins_.begin()++; iter_p != pins_.end(); ++iter_p) // All pins except the first are input pins
	{
	  predef_gates_type[(*iter_p).name] = "input";
    }
  }  
  
  else if (type_ == "or") 
  {
    if (pins_.size() < 3) 
	{
      return semantics_error (type_, name_);
	} 

	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	for (evl_pins::const_iterator iter_p = pins_.begin()++; iter_p != pins_.end(); ++iter_p) // All pins except the first are input pins
	{
	  predef_gates_type[(*iter_p).name] = "input";
    }
  }  
  
  else if (type_ == "xor") 
  {
    if (pins_.size() < 3) 
	{
      return semantics_error (type_, name_);
	}  

	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	for (evl_pins::const_iterator iter_p = pins_.begin()++; iter_p != pins_.end(); ++iter_p) // All pins except the first are input pins
	{
	  predef_gates_type[(*iter_p).name] = "input";
    }
  }  

  else if (type_ == "not") 
  {
    if (pins_.size() != 2) 
	{
      return semantics_error (type_, name_);
	}  
	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	iter_p = pins_.begin()++;	// The second pin is an input pin

	predef_gates_type[(*iter_p).name] = "input";
  }
  
  else if (type_ == "buf") 
  {
    if (pins_.size() != 2) 
	{
      return semantics_error (type_, name_);
	}  
	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	iter_p = pins_.begin()++;	// The second pin is an input pin

	predef_gates_type[(*iter_p).name] = "input";
  }
  
  else if (type_ == "dff") 
  {
    if (pins_.size() != 2) 
	{
      return semantics_error (type_, name_);
	}  

	evl_pins::const_iterator iter_p = pins_.begin(); // The first pin is an output pin

	predef_gates_type[(*iter_p).name] = "output";

	iter_p = pins_.begin()++;	// The second pin is an input pin

	predef_gates_type[(*iter_p).name] = "input";
  }
  
  else if (type_ == "one") 
  {
    if (pins_.size() < 1) 
	{
      return semantics_error (type_, name_); 
	}  

	for (evl_pins::const_iterator iter_p = pins_.begin(); iter_p != pins_.end(); ++iter_p) // All pins are output pins
	{
	  predef_gates_type[(*iter_p).name] = "output";
    }
  }  
  
  else if (type_ == "zero") 
  {
    if (pins_.size() < 1) 
	{
      return semantics_error (type_, name_);
	}  
	
	for (evl_pins::const_iterator iter_p = pins_.begin(); iter_p != pins_.end(); ++iter_p)	// All pins are output pins
	{
	  predef_gates_type[(*iter_p).name] = "output";
    }
  }  
  
  else if (type_ == "input") 
  {
    if (pins_.size() < 1) 
	{
      return semantics_error (type_, name_);
	}  

	for (evl_pins::const_iterator iter_p = pins_.begin(); iter_p != pins_.end(); ++iter_p) // All pins are output pins
	{
	  predef_gates_type[(*iter_p).name] = "output";
    }
  }  
 
  else if (type_ == "output") 
  {
    if (pins_.size() < 1) 
	{
      return semantics_error (type_, name_);
	}  
	
	for (evl_pins::const_iterator iter_p = pins_.begin(); iter_p != pins_.end(); ++iter_p)  // All pins are input pins
	{
	  predef_gates_type[(*iter_p).name] = "input";
    }
  }  
  return true;
}

void netlist::create_pins_list(const evl_pins &pins, vector_string &comp_pins_, vector_int &pin_position)
{
  size_t index = 0;

  for (evl_pins::const_iterator iter_p = pins.begin(); iter_p != pins.end(); ++iter_p) 
  {
    if ((*iter_p).bus_msb == -1)		// a 1-bit wire
	{ 
      comp_pins_.push_back((*iter_p).name);
	  pin_position.push_back(index);
    }
    else if ((*iter_p).bus_msb == (*iter_p).bus_lsb)	// a 1-bit wire
	{ 
      comp_pins_.push_back((make_net_name((*iter_p).name,(*iter_p).bus_msb)));
	  pin_position.push_back(index);
    }
    else	// a bus
	{
      for (int i = (*iter_p).bus_lsb; i <= (*iter_p).bus_msb; ++i) 
	  {
        comp_pins_.push_back((make_net_name((*iter_p).name,i)));
	    pin_position.push_back(index);
      }
    }
	index++;
  }
}

bool netlist::create_connects(const evl_components &components, const string_list &nets_list_, gate_pin_map &gate_pin_map_, pins_list &pins_list_, pin_lit_  &pllist)
{
	gate_pin gate_pin_;
	pin_list pl;
	
	
for (string_list::const_iterator iter_n = nets_list_.begin(); iter_n != nets_list_.end(); ++iter_n) 
  {
	string_list evl_pins_n_;
    for (evl_components::const_iterator iter_c = components.begin(); iter_c != components.end(); ++iter_c) 
	{
		vector_int pin_position;
		vector_string comp_pins_;
		
		create_pins_list((*iter_c).pins, comp_pins_, pin_position);

		string_2_list predef_gates_type;
	   
		if(!structural_semantics((*iter_c).type, (*iter_c).name, (*iter_c).pins, predef_gates_type)) //Check for semantics
		{
			return false;
		}

	   for (size_t i = 0; i < comp_pins_.size(); ++i) 
	   {
	    if(*iter_n == comp_pins_[i]) 
		{
	 	  
		  gate_pin_.name = (*iter_c).name;
		  gate_pin_.type = (*iter_c).type;

		  gate_pin_.pin_position = pin_position[i];

		  std::ostringstream pin_index_str;

          pin_index_str << pin_position[i];

		  std::string pin_net_map = *iter_n + (*iter_c).name + (*iter_c).type + pin_index_str.str();
		  
		  evl_pins_n_.push_back(pin_net_map);

		  gate_pin_map_.insert(std::make_pair(pin_net_map, gate_pin_));
		}
      }
    }
	pl.name = *iter_n;
	pl.value = evl_pins_n_;
	pllist.push_back(pl);
    //pins_list_.insert(std::make_pair(*iter_n, evl_pins_n_));	
  }

  return 1;
}

void netlist::netlist_write(std::ostream &out, const evl_components &components,  const evl_modules &modules) // Writing into output file
 { 
	//module_nm  mnm;
	/*for (evl_statements::const_iterator iter = statements.begin(); iter != statements.end(); ++iter)
	{
		if ((*iter).type == evl_statement::MODULE)
		{
			for (evl_tokens::const_iterator iter1 = (*iter).tokens.begin(); iter1 != (*iter).tokens.end(); ++iter1)
			{
					out << (*iter1).str << " ";
				
			}
			//out << wires.size() << " " << components.size() << std::endl;
		}
	}*/

   components_count = components.size();
   for (evl_modules::const_iterator iter_mod = modules.begin(); iter_mod != modules.end(); ++iter_mod)
   {
	   out << "module " << iter_mod->name << std::endl;
   }
   
   //out << "module " << mnm << std::endl;

   out << "nets" << " " << nets_list.size() << std::endl;
   for (pin_lit_::const_iterator iter_p = plist.begin(); iter_p != plist.end(); ++iter_p)
   {
		out << "  net " << iter_p->name << " " << iter_p->value.size() << std::endl;

		for (string_list::const_iterator iter_s = iter_p->value.begin(); iter_s != iter_p->value.end(); ++iter_s)
		{
			// out << "    " << gate_pin_map_[*iter_s].type << " "<< gate_pin_map_[*iter_s].pin_position << std::endl;
	    	
		out << "    " << gate_pin_map_[*iter_s].type << " " << gate_pin_map_[*iter_s].name << " "<< gate_pin_map_[*iter_s].pin_position << std::endl;
		}
   }
    
    std::string pin_name;
	std::list<std::string> pin_names;
	pin_count = 0;
 out << "components" << " " << components.size() << std::endl;
  for (evl_components::const_iterator iter_c = components.begin(); iter_c != components.end(); ++iter_c) 
  {
         if((*iter_c).name == "NONE")
            {
          out << "  " <<"component " << (*iter_c).type << " " << (*iter_c).pins.size() << std::endl;
              }
         else
           out << "  " <<"component " << (*iter_c).type << " " << (*iter_c).name << " " << (*iter_c).pins.size() << std::endl;

	pin_count += (*iter_c).pins.size();
	
    for (evl_pins::const_iterator iter_p = (*iter_c).pins.begin() ; iter_p != (*iter_c).pins.end(); ++iter_p) 
	{
	  int pin_width;

	  if((*iter_p).bus_msb == -1) 
	  {
	    pin_width = 1;

	    out<< "    pin " << pin_width << " " << (*iter_p).name << std::endl;
	  }
	  else if((*iter_p).bus_msb == (*iter_p).bus_lsb) 
	  {
	    pin_width = 1;
      
		pin_name = make_net_name((*iter_p).name, (*iter_p).bus_msb);

        out << "    pin " << pin_width << " " << pin_name << std::endl;
	  }
	  else 
	  {
	    pin_width = (*iter_p).bus_msb - (*iter_p).bus_lsb + 1;

        out << "    pin " << pin_width;

		for (int i = (*iter_p).bus_lsb; i <= (*iter_p).bus_msb; ++i) 
		{
			std::string pin_names_temp;

			pin_names_temp = make_net_name((*iter_p).name,i); 
			
			pin_names.push_back(pin_names_temp);

			out << " " << pin_names_temp;

		}

	    out << std::endl;
				
	  } 
    } 
  }	
}

bool gate::create(const evl_component &component, std::map<std::string, net *> &netlist_nets) 
{
	// store gate type and name;
	size_t pin_index = 0;

	for (evl_pins::const_iterator iter_p = component.pins.begin(); iter_p != component.pins.end(); ++iter_p)
	{
		create_pin(*iter_p, pin_index, netlist_nets);
		++pin_index;
	}
	return 1;
}

bool gate::create_pin(const evl_pin &p, size_t pin_index, std::map<std::string, net *> &netlist_nets) 
{
	pins_.push_back(new pin);

	return pins_.back()->create(this, pin_index, p, netlist_nets);
}

std::string make_net_name(std::string wire_name, int i) 
{
  assert(i >= 0);

  std::ostringstream oss;

  oss << wire_name << "[" << i << "]";

  return oss.str();
}

bool pin::create(gate *g, size_t pin_index, const evl_pin &p, std::map<std::string, net *> &netlist_nets) 
{
	//  store g and pin_index;

	if (p.bus_msb == -1) // a 1-bit wire
	{ 
		nets_.push_back(netlist_nets[p.name]); 
	}
	else   // a bus
	{ 
		//size_t index = 0;

		for(int i = p.bus_lsb; i <= p.bus_msb; ++i)
		{
			nets_.push_back(netlist_nets[make_net_name(p.name,i)]);
		}
	}
	return true;
}

void net::append_pin(pin *p) 
{
	connections_.push_back(p);
	
}

bool parse_evl_file(std::string evl_file, evl_wires &wires, evl_components &comps, evl_ports &ports, evl_modules &modules)
{
	evl_tokens tokens;
	evl_statements statements;
	evl_wires_map wires_map;
	evl_ports_map ports_map;
	evl_modules_map modules_map;
	map_evl_modules_line modules_line_map;
	

	if (!extract_tokens_from_file(evl_file, tokens)) 
	{
		return false;
	}
  
  int token_count = tokens.size();

  if (!move_tokens_to_module(tokens, modules_map, modules_line_map)) 
  {
		 return false;
  }
 
  std::cout << std::endl; //Displaying summary of results
  std::cout << evl_file << ": Info: Total token count = " << token_count << "." << std::endl;
  std::cout << evl_file << ": Info: Module(s) count = " << modules_map.size() << "." << std::endl << std::endl;

  for (evl_modules_map::iterator iter = modules_map.begin(); iter != modules_map.end(); ++iter) 
  {
    statements.clear();
	wires.clear();
	comps.clear();
	ports.clear();
	wires_map.clear();
	ports_map.clear();

    if (!group_tokens_into_statements(statements, iter->second)) 
	{
      return false;
    }
    evl_statements statements1(statements.begin(), statements.end());
  
    if (!process_all_statements(statements, wires, comps, ports, wires_map, ports_map,modules)) 
	{
      return false;
	}
  }
  return 1;
}

#include <iostream>
#include <string>
#include <list>
#include <assert.h>

#include "Lexical.h"

bool is_character_a_space(char ch)
{
	return (ch == ' ') || (ch == '\t')|| (ch == '\r') || (ch == '\n');
}

bool is_character_a_letter(char ch)
{
	return (((ch >= 'a') && (ch <= 'z'))       // a to z
				|| ((ch >= 'A') && (ch <= 'Z')));    // A to Z
}

bool is_character_a_digit(char ch)
{
	return ((ch >= '0') && (ch <= '9'));
}

// Extracting tokens from a line.
bool extract_tokens_from_line(std::string line, int line_no, evl_tokens &tokens) 
{ // use reference to modify it
  for (size_t i = 0; i < line.size();) 
  {
    // Skip the Comments
    if (line[i] == '/') 
	{ 
      ++i;
      if ((i == line.size()) || (line[i] != '/')) 
	  {
        std::cerr << "LINE " << line_no << ": a single / is not allowed" << std::endl;
        return false;
      }
      break; // skip the rest of the line by exiting the loop
    }
    
    // skip spaces
    else if (is_character_a_space(line[i])) 
	{
      ++i; // skip this space character
      continue; // skip the rest of the iteration
    } 
    // a SINGLE token

    else if ((line[i] == '(') || (line[i] == ')') || (line[i] == '=') || (line[i] == '[') || (line[i] == ']') || (line[i] == ':') || (line[i] == ';') || (line[i] == ',')) 
	{
      
	  evl_token token;
      token.line_no = line_no;
	  token.type = evl_token::SINGLE;
      token.str = std::string(1, line[i]);
      tokens.push_back(token);

//	  std::cout << line_no << ": " << token.type <<": " << token.str << std::endl; //Printing all the tokens found on each line

      ++i; // we consumed this character
      continue; // skip the rest of the iteration
    }

	// a NAME token
    else if (is_character_a_letter(line[i]) || (line[i] == '_') || (line[i] == '\\') || (line[i] == '.')) 
	{
      size_t name_begin = i;
      for (++i; i < line.size(); ++i) 
	  {
        if (!(is_character_a_letter(line[i]) || (is_character_a_digit(line[i])) || (line[i] == '_') || (line[i] == '\\') || (line[i] == '.'))) 
		{
          break; // [name_begin, i) is the range for the token
        }
      }

      evl_token token;
      token.type = evl_token::NAME;
      token.str = line.substr(name_begin, i-name_begin);
      token.line_no = line_no;
      tokens.push_back(token);

//	  std::cout << line_no << ": " << token.type <<": " << token.str << std::endl; //Printing all the tokens found on each line
	  
    }

	// a NUMBER token
    else if (is_character_a_digit(line[i])) 
	{
      size_t num_begin = i;
      for (++i; i < line.size(); ++i) 
	  {
        if (!(is_character_a_digit(line[i]))) 
		{
          break; // [name_begin, i) is the range for the token
        }
      }

      evl_token token;
      token.type = evl_token::NUMBER;
      token.str = line.substr(num_begin, i-num_begin);
      token.line_no = line_no;
      tokens.push_back(token);	 

//	  std::cout << line_no << ": " << token.type <<": " << token.str << std::endl; //Printing all the tokens found on each line
	   
    }
    else 
	{
      std::cerr << "LINE " << line_no << ": invalid character" << std::endl;
      return false;
    }
  }
  return true; // nothing left
}

// Extracting tokens from a File.
bool extract_tokens_from_file(std::string file_name, evl_tokens &tokens) 
{ // use reference to modify it
  std::ifstream input_file(file_name.c_str());
  
  if (!input_file) 
  {
    std::cerr << "I can't read " << file_name << "." << std::endl;
    return false;
  }
  tokens.clear(); // be defensive, make it empty
  std::string line;

  for (int line_no = 1; std::getline(input_file, line); ++line_no) 
  {
    if (!extract_tokens_from_line(line, line_no, tokens))
	{
      return false;
    }
  }
  return true;
}

void display_tokens(std::ostream &out, const evl_tokens &tokens) 
{
  assert(!tokens.empty());
  for (evl_tokens::const_iterator iterator = tokens.begin(); iterator != tokens.end(); ++iterator) 
  {
    if ((*iterator).type == evl_token::SINGLE) 
	{
      std::cout << "SINGLE " << (*iterator).str << std::endl; //If token type is SINGLE
    }
    else if ((*iterator).type == evl_token::NAME) 
    {
      std::cout << "NAME " << (*iterator).str << std::endl; //If token type is NAME
    }
    else 
    {
      std::cout << "NUMBER " << (*iterator).str << std::endl; // token type is NUMBER
    }
  }
}

#include <iostream>
#include <string>
#include <list>
#include <assert.h>
#include <map>
#include <algorithm>
#include "Netlist.h"
#include "Lexical.h"
#include "Syntactic.h"

bool is_endmodule(const evl_token &token) 
{
  return token.str == "endmodule";
}

bool is_module(const evl_token &token) 
{
  return token.str == "module";
}

bool operator<(const evl_wire &x, const evl_wire &y)
{
	return x.name < y.name;
}

bool process_module_statement(evl_modules &modules, evl_statement &s)
{
//	module_nm mnm;
	assert(s.type == evl_statement::MODULE);
	evl_module module;
	for (; !s.tokens.empty(); s.tokens.pop_front())
	{
		evl_token t = s.tokens.front();
		if (t.type == evl_token::NAME)
		{
			module.name = t.str;
			//mnm = t.str;
		}
		else
		{
			break;
		}
	}
	modules.push_back(module);
	return true;
}

bool move_tokens_to_statement(evl_tokens &statement_tokens, evl_tokens &tokens) 
{
  assert(statement_tokens.empty());

  assert(!tokens.empty());

  for (; !tokens.empty();) 
  {
    statement_tokens.push_back(tokens.front());
    tokens.erase(tokens.begin()); // consume one token per iteration
    
	if (statement_tokens.back().str == ";")
      break; // exit if the ending ";" is found
  }
  if (statement_tokens.back().str != ";") 
  {
    std::cerr << "Look for ';' but reach the end of file" << std::endl;
    return false;
  }
  return true;
}

bool group_tokens_into_statements(evl_statements &statements, evl_tokens &tokens) 
{
  assert(statements.empty());

  assert(!tokens.empty());

  for (; !tokens.empty();) 
  {
    // generate one statement per iteration

    evl_token token = tokens.front();
    if (token.type != evl_token::NAME)
	{
      std::cerr << "Need a NAME token but found '" << token.str << "' on line " << token.line_no << "." << std::endl;
      return false;
    }

    evl_statement statement;
	statement.tokens.clear(); // be defensive, make it empty

	if (token.str == "endmodule") // ENDMODULE statement
	{ 
	  statement.type = evl_statement::ENDMODULE;
      statement.tokens.push_back(tokens.front());
      tokens.erase(tokens.begin()); // consume one token per iteration
	  statements.push_back(statement);	
      continue; // skip the rest for the current iteration
   }

    if (token.str == "module") // MODULE statement
	{ 
      statement.type = evl_statement::MODULE;
    }
    else if (token.str == "wire") // WIRE statement
	{ 
      statement.type = evl_statement::WIRE;
    }
    else // COMPONENT statement
	{ 
      statement.type = evl_statement::COMPONENT;
    }
    
	if (!move_tokens_to_statement(statement.tokens, tokens))
	{
      return false;
    } 
	 
    assert(statement.tokens.back().str == ";");
    statements.push_back(statement);	
	
  }
	  
  return true;
}

bool move_tokens_to_module(evl_tokens &tokens, evl_modules_map &modules_map, map_evl_modules_line &modules_line_map) 
{
  assert(!tokens.empty());

  for(;!tokens.empty();)
  {
  evl_tokens::iterator iter_1 = std::find_if(tokens.begin(), tokens.end(), is_module);

  evl_tokens::iterator iter_2 = std::find_if(tokens.begin(), tokens.end(), is_module);
  
  ++iter_2;
  
  if (!((*iter_2).type == evl_token::NAME)) 
  {
     std::cerr << "Looking for module NAME but found '" << (*iter_2).str << "' on line " << (*iter_2).line_no << "." <<std::endl;
     return false;
  }
  
  std::string module_name;

  int module_line_no;
  module_name = (*iter_2).str;
  module_line_no = (*iter_2).line_no;
  
  evl_tokens::iterator next_ = std::find_if(tokens.begin(), tokens.end(), is_endmodule);
  
  if (next_ == tokens.end()) 
  {
    std::cerr << "Looking for 'endmodule' but reached the end of file." << std::endl;
    return false;
  }
  // move tokens within [tokens.begin(), next_] to statement_tokens

  ++next_;
  evl_tokens statement_tokens;
  statement_tokens.clear();
  statement_tokens.splice(statement_tokens.begin(), tokens, iter_1, next_);
  
  evl_modules_map::iterator it = modules_map.find(module_name);

  if (it != modules_map.end()) 
  {
    std::cerr << "Error at line " << module_line_no << ": The module '" << module_name << "' already exists." <<  std::endl;  
	return false;
  }

  modules_map[module_name] = statement_tokens;
  modules_line_map[module_name] = module_line_no;
  }

  return true;
}

bool process_wire_statement(evl_wires &wires, evl_statement &s, evl_wires_map &wires_map)
{
  assert(s.type == evl_statement::WIRE);
  
  enum state_type {INIT, WIRE, BUS, BUS_MSB, BUS_COLON, BUS_LSB, BUS_DONE, WIRE_NAME, WIRES, DONE};
  
  state_type state = INIT;
  evl_wire wire;
  int bus_width = 1;

  for (; !s.tokens.empty() && (state != DONE); s.tokens.pop_front()) 
  {
    evl_token t = s.tokens.front();
    
    switch(state) 
	{
      case INIT:
				if (t.str == "wire") 
				{
				  state = WIRE;
				}
				else 
				{
				  std::cerr << "Need 'wire' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;

      case WIRE:
				if (t.type == evl_token::NAME) 
				{
				  wire.name = t.str; wire.width = 1;
				  wire.line_no = t.line_no;
				  wires.push_back(wire);
		  
				  if (!map_wires(wires, wires_map)) 
				  {
					return false;
				  }
				  state = WIRE_NAME;
				}
				else if (t.str == "[") 
				{
				  state = BUS;
				}
				else 
				{
				  std::cerr << "Need NAME or '[' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case BUS:
				if (t.type == evl_token::NUMBER) 
				{
				  bus_width = atoi(t.str.c_str())+1;
				  state = BUS_MSB;
				}
				else 
				{
				  std::cerr << "Need NUMBER but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case BUS_MSB:
				if (t.str == ":") 
				{
				  state = BUS_COLON;
				}
				else 
				{
				  std::cerr << "Need ':' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      case BUS_COLON:
				if (t.str == "0")
				{
				  state = BUS_LSB;
				}
				else 
				{
				  std::cerr << "Need '0' but found '" << t.str << "' on line " << t.line_no << std::endl;
				  return false;
				}	
				break;
		
      case BUS_LSB:
				if (t.str == "]") 
				{
				  state = BUS_DONE;
				}
				else 
				{
				  std::cerr << "Need ']' but found '" << t.str << "' on line " << t.line_no << std::endl;
				  return false;
				}	
				break;
		
      case BUS_DONE:
				if (t.type == evl_token::NAME) 
				{
				  wire.name = t.str; wire.width = bus_width;
				  wire.line_no = t.line_no;
				  wires.push_back(wire);
				  if (!map_wires(wires, wires_map)) 
				  {
					return false;
				  }
				  state = WIRE_NAME;
				}
				else 
				{
				  std::cerr << "Need NAME but found '" << t.str << "' on line " << t.line_no << std::endl;
				  return false;
				}
				break;
		
      case WIRES:
				if (t.type == evl_token::NAME) 
				{
				  wire.name = t.str;
				  wire.line_no = t.line_no;
				  wires.push_back(wire);
		  
				  if (!map_wires(wires, wires_map)) 
				  {
					return false;
				  }
				  state = WIRE_NAME;
				}
				else 
				{
				  std::cerr << "Need NAME but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case WIRE_NAME:
				if (t.str == ",") 
				{
				  state = WIRES;
				}
				else if (t.str == ";") 
				{
				  state = DONE;
				}
				else 
				{
				  std::cerr << "Need ',' or ';' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      default :	
				assert(false); // shouldn't reach here
				
				return false;
				break;
    }
	
  }	
  if (!s.tokens.empty() || (state != DONE)) 
  {
    std::cerr << "Something wrong with statement." << std::endl;
    return false;
  }
  return true;
}

bool process_component_statement(evl_components &components, evl_statement &s, evl_wires_map &wires_map, evl_ports_map &ports_map) 
{
  assert(s.type == evl_statement::COMPONENT);
  
  enum state_type {INIT, TYPE, NAME, PINS, PIN_NAME, BUS, BUS_MSB, BUS_COLON, BUS_LSB, BUS_DONE, PINS_DONE, DONE};
  
  state_type state = INIT;
  evl_pin pin;
  evl_component comp;   

  for (; !s.tokens.empty() && (state != DONE); s.tokens.pop_front()) 
  {
    evl_token t = s.tokens.front();
    switch(state)
	{

      case INIT:
				if (t.type == evl_token::NAME) 
				{
				  comp.type = t.str;
				  comp.name = "NONE";
				  state = TYPE;
				}
				else 
				{
				  std::cerr << "Need NAME but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;

      case TYPE:
				if (t.type == evl_token::NAME) 
				{
				  comp.name = t.str;
				  state = NAME;
				}
				else if (t.str == "(") 
				{
				  state = PINS;
				}
				else 
				{
				  std::cerr << "Need NAME or '(' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case NAME:
				if (t.str == "(") 
				{
				  state = PINS;
				}
				else 
				{
				  std::cerr << "Need '(' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case PINS:
      // same as the branch for WIRE
				if (t.type == evl_token::NAME)
				{
				  pin.name = t.str; 
				  pin.bus_lsb = -1;
				  pin.bus_msb = -1;
				  state = PIN_NAME;
				}
				else
				{
				  std::cerr << "Need NAME but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case PIN_NAME:
				if (t.str == "[") 
				{
				  state = BUS;
				}
				else if (t.str == ",") 
				{
				  if(!match_pins_and_wires(pin, wires_map, ports_map, t)) 
				  {
					return false;
				  }
				  comp.pins.push_back(pin);

				  state = PINS;
				}
				else if (t.str == ")") 
				{
				  if(!match_pins_and_wires(pin, wires_map, ports_map, t)) {
					return false;
				  }
				  comp.pins.push_back(pin);
				  state = PINS_DONE;
				}
				else 
				{
				  std::cerr << "Need '[' or ',' or ')' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
		
      case BUS:
				if (t.type == evl_token::NUMBER) 
				{
				  pin.bus_msb = atoi(t.str.c_str());
				  state = BUS_MSB;
				}
				else 
				{
				  std::cerr << "Need NUMBER but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}
				break;
		
      case BUS_MSB:
				if (t.str == ":") 
				{
				  state = BUS_COLON;
				}
				else if (t.str == "]") 
				{
				  state = BUS_DONE;
				}
				else 
				{
				  std::cerr << "Need ':' or ']' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      case BUS_COLON:
				if (t.type == evl_token::NUMBER) 
				{
				  pin.bus_lsb = atoi(t.str.c_str());
				  state = BUS_LSB;
				}
				else 
				{
				  std::cerr << "Need NUMBER but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      case BUS_LSB:
				if (t.str == "]")
				{
				  state = BUS_DONE;
				}
				else 
				{
				  std::cerr << "Need ']' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      case BUS_DONE:
				if (t.str == ",") 
				{
				  if(!match_pins_and_wires(pin, wires_map, ports_map, t)) 
				  {
					return false;
				  }
				  comp.pins.push_back(pin);
				  state = PINS;
				}
				else if (t.str == ")") 
				{
				  if(!match_pins_and_wires(pin, wires_map, ports_map, t))
				  {
					return false;
				  }
				  comp.pins.push_back(pin);
				  state = PINS_DONE;
				}
				else
				{
				  std::cerr << "Need ',' or ')' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      case PINS_DONE:
				if (t.str == ";") 
				{
				  comp.pin_count = comp.pins.size();
				  components.push_back(comp);
//				  std::cout << "Component - Push Back" << comp.name << " " << " " << comp.pin_count << " " << comp.type << " " << std::endl;
				  state = DONE;
				}
				else 
				{
				  std::cerr << "Need ';' but found '" << t.str << "' on line " << t.line_no << "." << std::endl;
				  return false;
				}	
				break;
		
      default :	
				assert(false); // shouldn't reach here
				return false;
				break;
    
    }
	
  }	
  if (!s.tokens.empty() || (state != DONE)) 
  {
    std::cerr << "Something wrong with the statement." << std::endl;
    return false;
  }
  return true;
}

bool process_all_statements(evl_statements &statements, evl_wires &wires, evl_components &components, evl_ports &ports, evl_wires_map &wires_map, evl_ports_map &ports_map, evl_modules &modules)
{
  int count = 1;

  for (evl_statements::iterator iter = statements.begin(); iter != statements.end(); ++iter, ++count) 
  {
	  if ((*iter).type == evl_statement::MODULE)
	  {
		  if (!process_module_statement(modules, *iter))
		  {
			  return false;
		  }
	  }
    else if ((*iter).type == evl_statement::WIRE) 
	{
      if (!process_wire_statement(wires, *iter, wires_map)) 
	  {
        return false;
      }
    }
    else if ((*iter).type == evl_statement::COMPONENT) 
	{
      if (!process_component_statement(components,*iter, wires_map, ports_map)) 
	  {
        return false;
      } 
    }
    else if ((*iter).type == evl_statement::ENDMODULE) 
	{
  	  for (evl_tokens::iterator iter1 = (*iter).tokens.begin(); iter1 != (*iter).tokens.end(); ++iter1) 
	  {
        if ((*iter1).str != "endmodule") 
		{
          std::cerr << "Need 'endmodule' but found '" << (*iter1).str << "' on line " << (*iter1).line_no << "." << std::endl;
          return false;
		}
      } 
    }
  }
  return true;
}  

bool map_wires(evl_wires &wires, evl_wires_map &wires_map) 
{
    evl_wires_map::iterator it = wires_map.find(wires.back().name);
    
	if (it != wires_map.end()) 
	{
      std::cerr << "Error at line " << wires.back().line_no << ": The wire '" << wires.back().name << "' already exists." <<  std::endl;  
	  return false;
	}
    wires_map[wires.back().name] = wires.back().width;

    return true;    
}

bool map_ports(evl_ports &ports, evl_ports_map &ports_map) 
{
    evl_ports_map::iterator it = ports_map.find(ports.back().name);

    if (it != ports_map.end()) 
	{
      std::cerr << "Error at line " << ports.back().line_no << ": The port '" << ports.back().name << "' already exists." <<  std::endl;  
	  return false;
	}
    ports_map[ports.back().name] = ports.back().width;
    return true;    
}

bool match_pins_and_wires(evl_pin &pin, evl_wires_map &wires_map, evl_ports_map &ports_map, const evl_token &t) 
{
    evl_wires_map::iterator iter_3 = wires_map.find(pin.name);
    evl_ports_map::iterator iter_4 = ports_map.find(pin.name);

	if (iter_3 != wires_map.end()) 
	{ 
      if (wires_map[pin.name] != 1 && pin.bus_msb == -1 && pin.bus_lsb == -1)  
	  { 
        pin.bus_msb = wires_map[pin.name] - 1;
        pin.bus_lsb = 0;
	  }
	  else if (pin.bus_msb != pin.bus_lsb && pin.bus_lsb == -1)  
	  { 
	    if (!((wires_map[pin.name] > pin.bus_msb) && (pin.bus_msb >= 0))) 
		{
          std::cerr << "The wire '" << pin.name << "' does not satisfy the condition [width > msb >= 0] on line " << t.line_no << "." << std::endl;
          return false;
	    }
	    else if (((wires_map[pin.name] == 1) && (pin.bus_msb >= 0))) 
		{
          std::cerr << "The wire '" << pin.name << "' is not a bus on line " << t.line_no << "." << std::endl;
          return false;
	    }
	    pin.bus_lsb = pin.bus_msb;
	  }
	  else if (wires_map[pin.name] == 1 && pin.bus_msb == -1 && pin.bus_lsb == -1)  
	  { 
		;
	  }
	  else 
	  { 
	    if (!((wires_map[pin.name] > pin.bus_msb) && (pin.bus_msb >= pin.bus_lsb) && (pin.bus_lsb >= 0))) 
		{
          std::cerr << "The wire '" << pin.name << "' does not satisfy the condition [width > msb >= lsb >= 0] on line " << t.line_no << "." << std::endl;
          return false;
	    }
	  }
	} 
    else if(iter_4 != ports_map.end())
	{ 
      if (ports_map[pin.name] != 1 && pin.bus_msb == -1 && pin.bus_lsb == -1)  
	  { 
        pin.bus_msb = ports_map[pin.name] - 1;
        pin.bus_lsb = 0;
	  }
	  else if (pin.bus_msb != pin.bus_lsb && pin.bus_lsb == -1)  
	  { 
	    if (!((ports_map[pin.name] > pin.bus_msb) && (pin.bus_msb >= 0))) 
		{
          std::cerr << "The port '" << pin.name << "' does not satisfy the condition [width > msb >= 0] on line " << t.line_no << "." << std::endl;
          return false;
	    }
	    else if (((ports_map[pin.name] == 1) && (pin.bus_msb >= 0))) 
		{
          std::cerr << "The port '" << pin.name << "' is not a bus on line " << t.line_no << "." << std::endl;
          return false;
	    }
	    pin.bus_lsb = pin.bus_msb;
	  }
	  else if (ports_map[pin.name] == 1 && pin.bus_msb == -1 && pin.bus_lsb == -1)  
	  { 
		;
	  }
	  else 
	  { 
	    if (!((ports_map[pin.name] > pin.bus_msb) && (pin.bus_msb >= pin.bus_lsb) && (pin.bus_lsb >= 0))) 
		{
          std::cerr << "The port '" << pin.name << "' does not satisfy the condition [width > msb >= lsb >= 0] on line: " << t.line_no << "." << std::endl;
          return false;
	    }
	  }
	} 
	
    return true;    
}

void display_syntactic(std::ostream &out, const evl_statements &statements, evl_wires &wires, const evl_components &components) 
{
  for (evl_statements::const_iterator iter = statements.begin(); iter != statements.end(); ++iter) 
  {
    if ((*iter).type == evl_statement::MODULE) 
	{
	  for (evl_tokens::const_iterator iter1 = (*iter).tokens.begin(); iter1 != (*iter).tokens.end(); ++iter1) 
	  {
        if ((*iter1).str != ";") 
		{
          out << (*iter1).str << " ";
	    }	
	  }
      out << wires.size() << " " << components.size() <<  std::endl;	  
    }
  }	
  wires.sort();

  for (evl_wires::iterator iter1 = wires.begin(); iter1 != wires.end(); ++iter1) 
  {
    out << "wire " << (*iter1).name << " " << (*iter1).width <<  std::endl;
  }	
      
  for (evl_components::const_iterator iter1 = components.begin(); iter1 != components.end(); ++iter1) 
  {
    out << "component " << (*iter1).type << " " << (*iter1).name << " " << (*iter1).pin_count <<  std::endl;
	
	for (evl_pins::const_iterator iter2 = (*iter1).pins.begin(); iter2 != (*iter1).pins.end(); ++iter2) 
	{
      out << "pin " << (*iter2).name << " " << (*iter2).bus_msb << " " << (*iter2).bus_lsb <<  std::endl;
    }	
  }	
}
